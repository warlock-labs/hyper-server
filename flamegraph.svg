<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="335"><g><title>bytes::bytes::shared_clone (1 samples, 0.30%)</title><rect x="0.0000%" y="229" width="0.2985%" height="15" fill="rgb(239,42,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;hello_world_tower_hyper_tls_tcp::concurrent_benchmark::{{closure}}::{{closure}},alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt;&gt; (1 samples, 0.30%)</title><rect x="0.2985%" y="229" width="0.2985%" height="15" fill="rgb(239,40,7)" fg:x="1" fg:w="1"/><text x="0.5485%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Error&gt; (3 samples, 0.90%)</title><rect x="0.5970%" y="229" width="0.8955%" height="15" fill="rgb(239,11,31)" fg:x="2" fg:w="3"/><text x="0.8470%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::connect::http::ConnectError&gt; (2 samples, 0.60%)</title><rect x="0.8955%" y="213" width="0.5970%" height="15" fill="rgb(224,77,40)" fg:x="3" fg:w="2"/><text x="1.1455%" y="223.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.30%)</title><rect x="1.1940%" y="197" width="0.2985%" height="15" fill="rgb(226,15,5)" fg:x="4" fg:w="1"/><text x="1.4440%" y="207.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.30%)</title><rect x="1.1940%" y="181" width="0.2985%" height="15" fill="rgb(254,188,5)" fg:x="4" fg:w="1"/><text x="1.4440%" y="191.50"></text></g><g><title>hello_world_tow (6 samples, 1.79%)</title><rect x="0.0000%" y="421" width="1.7910%" height="15" fill="rgb(241,148,52)" fg:x="0" fg:w="6"/><text x="0.2500%" y="431.50">h..</text></g><g><title>_start (6 samples, 1.79%)</title><rect x="0.0000%" y="405" width="1.7910%" height="15" fill="rgb(251,48,36)" fg:x="0" fg:w="6"/><text x="0.2500%" y="415.50">_..</text></g><g><title>__libc_start_main (6 samples, 1.79%)</title><rect x="0.0000%" y="389" width="1.7910%" height="15" fill="rgb(243,83,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="399.50">_..</text></g><g><title>main (6 samples, 1.79%)</title><rect x="0.0000%" y="373" width="1.7910%" height="15" fill="rgb(210,105,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50">m..</text></g><g><title>std::rt::lang_start_internal (6 samples, 1.79%)</title><rect x="0.0000%" y="357" width="1.7910%" height="15" fill="rgb(239,60,36)" fg:x="0" fg:w="6"/><text x="0.2500%" y="367.50">s..</text></g><g><title>std::rt::lang_start::{{closure}} (6 samples, 1.79%)</title><rect x="0.0000%" y="341" width="1.7910%" height="15" fill="rgb(210,20,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="351.50">s..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6 samples, 1.79%)</title><rect x="0.0000%" y="325" width="1.7910%" height="15" fill="rgb(244,26,53)" fg:x="0" fg:w="6"/><text x="0.2500%" y="335.50">s..</text></g><g><title>hello_world_tower_hyper_tls_tcp::main (6 samples, 1.79%)</title><rect x="0.0000%" y="309" width="1.7910%" height="15" fill="rgb(240,100,49)" fg:x="0" fg:w="6"/><text x="0.2500%" y="319.50">h..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (6 samples, 1.79%)</title><rect x="0.0000%" y="293" width="1.7910%" height="15" fill="rgb(250,46,45)" fg:x="0" fg:w="6"/><text x="0.2500%" y="303.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 1.79%)</title><rect x="0.0000%" y="277" width="1.7910%" height="15" fill="rgb(220,181,29)" fg:x="0" fg:w="6"/><text x="0.2500%" y="287.50">&lt;..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (6 samples, 1.79%)</title><rect x="0.0000%" y="261" width="1.7910%" height="15" fill="rgb(213,137,33)" fg:x="0" fg:w="6"/><text x="0.2500%" y="271.50">c..</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (6 samples, 1.79%)</title><rect x="0.0000%" y="245" width="1.7910%" height="15" fill="rgb(213,27,48)" fg:x="0" fg:w="6"/><text x="0.2500%" y="255.50">&lt;..</text></g><g><title>tokio::task::spawn::spawn (1 samples, 0.30%)</title><rect x="1.4925%" y="229" width="0.2985%" height="15" fill="rgb(245,180,39)" fg:x="5" fg:w="1"/><text x="1.7425%" y="239.50"></text></g><g><title>_rjem_je_tsd_cleanup (1 samples, 0.30%)</title><rect x="5.3731%" y="405" width="0.2985%" height="15" fill="rgb(212,158,42)" fg:x="18" fg:w="1"/><text x="5.6231%" y="415.50"></text></g><g><title>tcache_destroy.constprop.0 (1 samples, 0.30%)</title><rect x="5.3731%" y="389" width="0.2985%" height="15" fill="rgb(228,193,18)" fg:x="18" fg:w="1"/><text x="5.6231%" y="399.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.30%)</title><rect x="5.3731%" y="373" width="0.2985%" height="15" fill="rgb(245,172,29)" fg:x="18" fg:w="1"/><text x="5.6231%" y="383.50"></text></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.30%)</title><rect x="5.3731%" y="357" width="0.2985%" height="15" fill="rgb(207,98,24)" fg:x="18" fg:w="1"/><text x="5.6231%" y="367.50"></text></g><g><title>pac_dalloc_impl (1 samples, 0.30%)</title><rect x="5.3731%" y="341" width="0.2985%" height="15" fill="rgb(249,92,26)" fg:x="18" fg:w="1"/><text x="5.6231%" y="351.50"></text></g><g><title>_rjem_je_extent_record (1 samples, 0.30%)</title><rect x="5.3731%" y="325" width="0.2985%" height="15" fill="rgb(217,176,26)" fg:x="18" fg:w="1"/><text x="5.6231%" y="335.50"></text></g><g><title>extent_try_coalesce_impl (1 samples, 0.30%)</title><rect x="5.3731%" y="309" width="0.2985%" height="15" fill="rgb(221,8,39)" fg:x="18" fg:w="1"/><text x="5.6231%" y="319.50"></text></g><g><title>extent_merge_impl.constprop.0 (1 samples, 0.30%)</title><rect x="5.3731%" y="293" width="0.2985%" height="15" fill="rgb(208,90,18)" fg:x="18" fg:w="1"/><text x="5.6231%" y="303.50"></text></g><g><title>_rjem_je_edata_cache_put (1 samples, 0.30%)</title><rect x="5.3731%" y="277" width="0.2985%" height="15" fill="rgb(207,202,30)" fg:x="18" fg:w="1"/><text x="5.6231%" y="287.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (8 samples, 2.39%)</title><rect x="5.6716%" y="341" width="2.3881%" height="15" fill="rgb(231,124,22)" fg:x="19" fg:w="8"/><text x="5.9216%" y="351.50">st..</text></g><g><title>syscall (6 samples, 1.79%)</title><rect x="6.2687%" y="325" width="1.7910%" height="15" fill="rgb(206,15,5)" fg:x="21" fg:w="6"/><text x="6.5187%" y="335.50">s..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_timeout (13 samples, 3.88%)</title><rect x="5.6716%" y="357" width="3.8806%" height="15" fill="rgb(239,16,52)" fg:x="19" fg:w="13"/><text x="5.9216%" y="367.50">std:..</text></g><g><title>syscall (5 samples, 1.49%)</title><rect x="8.0597%" y="341" width="1.4925%" height="15" fill="rgb(245,213,29)" fg:x="27" fg:w="5"/><text x="8.3097%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (2 samples, 0.60%)</title><rect x="9.5522%" y="357" width="0.5970%" height="15" fill="rgb(213,203,36)" fg:x="32" fg:w="2"/><text x="9.8022%" y="367.50"></text></g><g><title>syscall (1 samples, 0.30%)</title><rect x="9.8507%" y="341" width="0.2985%" height="15" fill="rgb(209,55,18)" fg:x="33" fg:w="1"/><text x="10.1007%" y="351.50"></text></g><g><title>syscall (2 samples, 0.60%)</title><rect x="10.1493%" y="357" width="0.5970%" height="15" fill="rgb(207,133,49)" fg:x="34" fg:w="2"/><text x="10.3993%" y="367.50"></text></g><g><title>__file_change_detection_for_path (2 samples, 0.60%)</title><rect x="11.9403%" y="293" width="0.5970%" height="15" fill="rgb(240,33,46)" fg:x="40" fg:w="2"/><text x="12.1903%" y="303.50"></text></g><g><title>fstatat64 (2 samples, 0.60%)</title><rect x="11.9403%" y="277" width="0.5970%" height="15" fill="rgb(212,35,2)" fg:x="40" fg:w="2"/><text x="12.1903%" y="287.50"></text></g><g><title>__lll_lock_wake_private (2 samples, 0.60%)</title><rect x="12.5373%" y="293" width="0.5970%" height="15" fill="rgb(231,119,28)" fg:x="42" fg:w="2"/><text x="12.7873%" y="303.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.30%)</title><rect x="14.0299%" y="277" width="0.2985%" height="15" fill="rgb(252,178,7)" fg:x="47" fg:w="1"/><text x="14.2799%" y="287.50"></text></g><g><title>__resolv_context_get (7 samples, 2.09%)</title><rect x="13.1343%" y="293" width="2.0896%" height="15" fill="rgb(251,91,4)" fg:x="44" fg:w="7"/><text x="13.3843%" y="303.50">_..</text></g><g><title>__lll_lock_wake_private (3 samples, 0.90%)</title><rect x="14.3284%" y="277" width="0.8955%" height="15" fill="rgb(233,122,19)" fg:x="48" fg:w="3"/><text x="14.5784%" y="287.50"></text></g><g><title>__resolv_context_put (3 samples, 0.90%)</title><rect x="15.2239%" y="293" width="0.8955%" height="15" fill="rgb(231,208,46)" fg:x="51" fg:w="3"/><text x="15.4739%" y="303.50"></text></g><g><title>__clock_gettime (1 samples, 0.30%)</title><rect x="16.7164%" y="229" width="0.2985%" height="15" fill="rgb(243,15,41)" fg:x="56" fg:w="1"/><text x="16.9664%" y="239.50"></text></g><g><title>__res_context_mkquery (2 samples, 0.60%)</title><rect x="16.7164%" y="245" width="0.5970%" height="15" fill="rgb(210,32,43)" fg:x="56" fg:w="2"/><text x="16.9664%" y="255.50"></text></g><g><title>__ns_name_compress (1 samples, 0.30%)</title><rect x="17.0149%" y="229" width="0.2985%" height="15" fill="rgb(222,177,15)" fg:x="57" fg:w="1"/><text x="17.2649%" y="239.50"></text></g><g><title>__ns_name_pack (1 samples, 0.30%)</title><rect x="17.0149%" y="213" width="0.2985%" height="15" fill="rgb(244,121,34)" fg:x="57" fg:w="1"/><text x="17.2649%" y="223.50"></text></g><g><title>__poll (1 samples, 0.30%)</title><rect x="17.3134%" y="229" width="0.2985%" height="15" fill="rgb(234,138,4)" fg:x="58" fg:w="1"/><text x="17.5634%" y="239.50"></text></g><g><title>__socket (3 samples, 0.90%)</title><rect x="17.6119%" y="229" width="0.8955%" height="15" fill="rgb(240,97,48)" fg:x="59" fg:w="3"/><text x="17.8619%" y="239.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (23 samples, 6.87%)</title><rect x="11.9403%" y="325" width="6.8657%" height="15" fill="rgb(237,65,54)" fg:x="40" fg:w="23"/><text x="12.1903%" y="335.50">&lt;std::sys..</text></g><g><title>getaddrinfo (23 samples, 6.87%)</title><rect x="11.9403%" y="309" width="6.8657%" height="15" fill="rgb(214,25,24)" fg:x="40" fg:w="23"/><text x="12.1903%" y="319.50">getaddrin..</text></g><g><title>_nss_dns_gethostbyname4_r (9 samples, 2.69%)</title><rect x="16.1194%" y="293" width="2.6866%" height="15" fill="rgb(213,5,3)" fg:x="54" fg:w="9"/><text x="16.3694%" y="303.50">_n..</text></g><g><title>__res_context_search (9 samples, 2.69%)</title><rect x="16.1194%" y="277" width="2.6866%" height="15" fill="rgb(219,81,29)" fg:x="54" fg:w="9"/><text x="16.3694%" y="287.50">__..</text></g><g><title>__res_context_query (8 samples, 2.39%)</title><rect x="16.4179%" y="261" width="2.3881%" height="15" fill="rgb(220,43,48)" fg:x="55" fg:w="8"/><text x="16.6679%" y="271.50">__..</text></g><g><title>__res_context_send (5 samples, 1.49%)</title><rect x="17.3134%" y="245" width="1.4925%" height="15" fill="rgb(239,157,2)" fg:x="58" fg:w="5"/><text x="17.5634%" y="255.50"></text></g><g><title>ioctl (1 samples, 0.30%)</title><rect x="18.5075%" y="229" width="0.2985%" height="15" fill="rgb(213,104,43)" fg:x="62" fg:w="1"/><text x="18.7575%" y="239.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (25 samples, 7.46%)</title><rect x="11.9403%" y="341" width="7.4627%" height="15" fill="rgb(237,84,9)" fg:x="40" fg:w="25"/><text x="12.1903%" y="351.50">&lt;(&amp;str,u16..</text></g><g><title>core::net::parser::Parser::read_ipv4_addr (2 samples, 0.60%)</title><rect x="18.8060%" y="325" width="0.5970%" height="15" fill="rgb(252,6,33)" fg:x="63" fg:w="2"/><text x="19.0560%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::next_remote_task (2 samples, 0.60%)</title><rect x="19.4030%" y="341" width="0.5970%" height="15" fill="rgb(251,172,22)" fg:x="65" fg:w="2"/><text x="19.6530%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.30%)</title><rect x="19.7015%" y="325" width="0.2985%" height="15" fill="rgb(244,91,53)" fg:x="66" fg:w="1"/><text x="19.9515%" y="335.50"></text></g><g><title>syscall (1 samples, 0.30%)</title><rect x="20.0000%" y="325" width="0.2985%" height="15" fill="rgb(219,29,30)" fg:x="67" fg:w="1"/><text x="20.2500%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (3 samples, 0.90%)</title><rect x="20.2985%" y="325" width="0.8955%" height="15" fill="rgb(213,3,15)" fg:x="68" fg:w="3"/><text x="20.5485%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (3 samples, 0.90%)</title><rect x="20.2985%" y="309" width="0.8955%" height="15" fill="rgb(208,25,28)" fg:x="68" fg:w="3"/><text x="20.5485%" y="319.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (3 samples, 0.90%)</title><rect x="21.1940%" y="309" width="0.8955%" height="15" fill="rgb(252,144,25)" fg:x="71" fg:w="3"/><text x="21.4440%" y="319.50"></text></g><g><title>epoll_wait (2 samples, 0.60%)</title><rect x="21.4925%" y="293" width="0.5970%" height="15" fill="rgb(226,220,25)" fg:x="72" fg:w="2"/><text x="21.7425%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (8 samples, 2.39%)</title><rect x="20.0000%" y="341" width="2.3881%" height="15" fill="rgb(212,131,28)" fg:x="67" fg:w="8"/><text x="20.2500%" y="351.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (4 samples, 1.19%)</title><rect x="21.1940%" y="325" width="1.1940%" height="15" fill="rgb(219,143,52)" fg:x="71" fg:w="4"/><text x="21.4440%" y="335.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.30%)</title><rect x="22.0896%" y="309" width="0.2985%" height="15" fill="rgb(215,56,7)" fg:x="74" fg:w="1"/><text x="22.3396%" y="319.50"></text></g><g><title>&lt;rustls::client::hs::ExpectServerHelloOrHelloRetryRequest as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.30%)</title><rect x="22.9851%" y="229" width="0.2985%" height="15" fill="rgb(239,59,51)" fg:x="77" fg:w="1"/><text x="23.2351%" y="239.50"></text></g><g><title>&lt;rustls::client::hs::ExpectServerHello as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.30%)</title><rect x="22.9851%" y="213" width="0.2985%" height="15" fill="rgb(209,215,4)" fg:x="77" fg:w="1"/><text x="23.2351%" y="223.50"></text></g><g><title>rustls::hash_hs::HandshakeHashBuffer::start_hash (1 samples, 0.30%)</title><rect x="22.9851%" y="197" width="0.2985%" height="15" fill="rgb(221,118,39)" fg:x="77" fg:w="1"/><text x="23.2351%" y="207.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.90%)</title><rect x="22.6866%" y="277" width="0.8955%" height="15" fill="rgb(236,6,44)" fg:x="76" fg:w="3"/><text x="22.9366%" y="287.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (2 samples, 0.60%)</title><rect x="22.9851%" y="261" width="0.5970%" height="15" fill="rgb(216,122,9)" fg:x="77" fg:w="2"/><text x="23.2351%" y="271.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (2 samples, 0.60%)</title><rect x="22.9851%" y="245" width="0.5970%" height="15" fill="rgb(244,134,42)" fg:x="77" fg:w="2"/><text x="23.2351%" y="255.50"></text></g><g><title>&lt;rustls::client::tls13::ExpectCertificateOrCompressedCertificateOrCertReq as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.30%)</title><rect x="23.2836%" y="229" width="0.2985%" height="15" fill="rgb(209,189,35)" fg:x="78" fg:w="1"/><text x="23.5336%" y="239.50"></text></g><g><title>&lt;rustls::client::tls13::ExpectCompressedCertificate as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.30%)</title><rect x="23.2836%" y="213" width="0.2985%" height="15" fill="rgb(250,47,36)" fg:x="78" fg:w="1"/><text x="23.5336%" y="223.50"></text></g><g><title>&lt;rustls::compress::feat_zlib_rs::ZlibRsDecompressor as rustls::compress::CertDecompressor&gt;::decompress (1 samples, 0.30%)</title><rect x="23.2836%" y="197" width="0.2985%" height="15" fill="rgb(252,112,4)" fg:x="78" fg:w="1"/><text x="23.5336%" y="207.50"></text></g><g><title>zlib_rs::inflate::State::len (1 samples, 0.30%)</title><rect x="23.2836%" y="181" width="0.2985%" height="15" fill="rgb(221,79,51)" fg:x="78" fg:w="1"/><text x="23.5336%" y="191.50"></text></g><g><title>zlib_rs::inflate::State::check (1 samples, 0.30%)</title><rect x="23.2836%" y="165" width="0.2985%" height="15" fill="rgb(232,65,53)" fg:x="78" fg:w="1"/><text x="23.5336%" y="175.50"></text></g><g><title>zlib_rs::adler32::adler32 (1 samples, 0.30%)</title><rect x="23.2836%" y="149" width="0.2985%" height="15" fill="rgb(211,37,7)" fg:x="78" fg:w="1"/><text x="23.5336%" y="159.50"></text></g><g><title>&lt;rustls::conn::ConnectionCommon&lt;T&gt; as rustls::conn::connection::PlaintextSink&gt;::write (1 samples, 0.30%)</title><rect x="23.8806%" y="229" width="0.2985%" height="15" fill="rgb(234,221,18)" fg:x="80" fg:w="1"/><text x="24.1306%" y="239.50"></text></g><g><title>rustls::common_state::CommonState::send_appdata_encrypt (1 samples, 0.30%)</title><rect x="23.8806%" y="213" width="0.2985%" height="15" fill="rgb(220,158,26)" fg:x="80" fg:w="1"/><text x="24.1306%" y="223.50"></text></g><g><title>rustls::common_state::CommonState::send_single_fragment (1 samples, 0.30%)</title><rect x="23.8806%" y="197" width="0.2985%" height="15" fill="rgb(220,70,6)" fg:x="80" fg:w="1"/><text x="24.1306%" y="207.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::tls13::GcmMessageEncrypter as rustls::crypto::cipher::MessageEncrypter&gt;::encrypt (1 samples, 0.30%)</title><rect x="23.8806%" y="181" width="0.2985%" height="15" fill="rgb(250,39,48)" fg:x="80" fg:w="1"/><text x="24.1306%" y="191.50"></text></g><g><title>aws_lc_rs::aead::unbound_key::UnboundKey::seal_in_place_append_tag (1 samples, 0.30%)</title><rect x="23.8806%" y="165" width="0.2985%" height="15" fill="rgb(206,40,27)" fg:x="80" fg:w="1"/><text x="24.1306%" y="175.50"></text></g><g><title>aws_lc_0_21_1_EVP_AEAD_CTX_seal (1 samples, 0.30%)</title><rect x="23.8806%" y="149" width="0.2985%" height="15" fill="rgb(247,80,36)" fg:x="80" fg:w="1"/><text x="24.1306%" y="159.50"></text></g><g><title>aead_aes_gcm_tls13_seal_scatter (1 samples, 0.30%)</title><rect x="23.8806%" y="133" width="0.2985%" height="15" fill="rgb(222,9,20)" fg:x="80" fg:w="1"/><text x="24.1306%" y="143.50"></text></g><g><title>aead_aes_gcm_seal_scatter_impl (1 samples, 0.30%)</title><rect x="23.8806%" y="117" width="0.2985%" height="15" fill="rgb(217,26,45)" fg:x="80" fg:w="1"/><text x="24.1306%" y="127.50"></text></g><g><title>aws_lc_0_21_1_CRYPTO_gcm128_aad (1 samples, 0.30%)</title><rect x="23.8806%" y="101" width="0.2985%" height="15" fill="rgb(221,67,14)" fg:x="80" fg:w="1"/><text x="24.1306%" y="111.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (2 samples, 0.60%)</title><rect x="23.8806%" y="261" width="0.5970%" height="15" fill="rgb(248,100,24)" fg:x="80" fg:w="2"/><text x="24.1306%" y="271.50"></text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.60%)</title><rect x="23.8806%" y="245" width="0.5970%" height="15" fill="rgb(230,187,16)" fg:x="80" fg:w="2"/><text x="24.1306%" y="255.50"></text></g><g><title>rustls::vecbuf::ChunkVecBuffer::write_to (1 samples, 0.30%)</title><rect x="24.1791%" y="229" width="0.2985%" height="15" fill="rgb(205,108,13)" fg:x="81" fg:w="1"/><text x="24.4291%" y="239.50"></text></g><g><title>rustls::vecbuf::ChunkVecBuffer::consume (1 samples, 0.30%)</title><rect x="24.1791%" y="213" width="0.2985%" height="15" fill="rgb(235,71,51)" fg:x="81" fg:w="1"/><text x="24.4291%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (7 samples, 2.09%)</title><rect x="22.6866%" y="293" width="2.0896%" height="15" fill="rgb(251,172,48)" fg:x="76" fg:w="7"/><text x="22.9366%" y="303.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (4 samples, 1.19%)</title><rect x="23.5821%" y="277" width="1.1940%" height="15" fill="rgb(240,96,49)" fg:x="79" fg:w="4"/><text x="23.8321%" y="287.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.30%)</title><rect x="24.4776%" y="261" width="0.2985%" height="15" fill="rgb(235,46,36)" fg:x="82" fg:w="1"/><text x="24.7276%" y="271.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.30%)</title><rect x="24.4776%" y="245" width="0.2985%" height="15" fill="rgb(244,3,49)" fg:x="82" fg:w="1"/><text x="24.7276%" y="255.50"></text></g><g><title>&lt;http_body_util::combinators::collect::Collect&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.30%)</title><rect x="24.7761%" y="293" width="0.2985%" height="15" fill="rgb(206,78,54)" fg:x="83" fg:w="1"/><text x="25.0261%" y="303.50"></text></g><g><title>&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (1 samples, 0.30%)</title><rect x="24.7761%" y="277" width="0.2985%" height="15" fill="rgb(208,85,42)" fg:x="83" fg:w="1"/><text x="25.0261%" y="287.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::incoming::Incoming&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (1 samples, 0.30%)</title><rect x="25.0746%" y="261" width="0.2985%" height="15" fill="rgb(219,196,21)" fg:x="84" fg:w="1"/><text x="25.3246%" y="271.50"></text></g><g><title>&lt;hyper_util::server::conn::auto::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (2 samples, 0.60%)</title><rect x="25.0746%" y="293" width="0.5970%" height="15" fill="rgb(238,19,9)" fg:x="84" fg:w="2"/><text x="25.3246%" y="303.50"></text></g><g><title>&lt;hyper::server::conn::http1::UpgradeableConnection&lt;I,S&gt; as core::future::future::Future&gt;::poll (2 samples, 0.60%)</title><rect x="25.0746%" y="277" width="0.5970%" height="15" fill="rgb(206,86,13)" fg:x="84" fg:w="2"/><text x="25.3246%" y="287.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (1 samples, 0.30%)</title><rect x="25.3731%" y="261" width="0.2985%" height="15" fill="rgb(214,123,40)" fg:x="85" fg:w="1"/><text x="25.6231%" y="271.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_append2 (1 samples, 0.30%)</title><rect x="25.3731%" y="245" width="0.2985%" height="15" fill="rgb(243,53,5)" fg:x="85" fg:w="1"/><text x="25.6231%" y="255.50"></text></g><g><title>_rjem_malloc (1 samples, 0.30%)</title><rect x="25.3731%" y="229" width="0.2985%" height="15" fill="rgb(254,186,31)" fg:x="85" fg:w="1"/><text x="25.6231%" y="239.50"></text></g><g><title>_rjem_malloc (1 samples, 0.30%)</title><rect x="25.6716%" y="261" width="0.2985%" height="15" fill="rgb(221,216,25)" fg:x="86" fg:w="1"/><text x="25.9216%" y="271.50"></text></g><g><title>accept4 (4 samples, 1.19%)</title><rect x="25.9701%" y="261" width="1.1940%" height="15" fill="rgb(248,107,42)" fg:x="87" fg:w="4"/><text x="26.2201%" y="271.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 1.79%)</title><rect x="25.6716%" y="277" width="1.7910%" height="15" fill="rgb(221,85,43)" fg:x="86" fg:w="6"/><text x="25.9216%" y="287.50">&lt;..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (1 samples, 0.30%)</title><rect x="27.1642%" y="261" width="0.2985%" height="15" fill="rgb(225,34,24)" fg:x="91" fg:w="1"/><text x="27.4142%" y="271.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.30%)</title><rect x="27.1642%" y="245" width="0.2985%" height="15" fill="rgb(211,119,1)" fg:x="91" fg:w="1"/><text x="27.4142%" y="255.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.30%)</title><rect x="27.4627%" y="277" width="0.2985%" height="15" fill="rgb(254,216,46)" fg:x="92" fg:w="1"/><text x="27.7127%" y="287.50"></text></g><g><title>epoll_ctl (1 samples, 0.30%)</title><rect x="27.4627%" y="261" width="0.2985%" height="15" fill="rgb(238,11,38)" fg:x="92" fg:w="1"/><text x="27.7127%" y="271.50"></text></g><g><title>__close (6 samples, 1.79%)</title><rect x="27.7612%" y="277" width="1.7910%" height="15" fill="rgb(233,50,15)" fg:x="93" fg:w="6"/><text x="28.0112%" y="287.50">_..</text></g><g><title>&lt;rustls::crypto::aws_lc_rs::hash::Hash as rustls::crypto::hash::Hash&gt;::start (1 samples, 0.30%)</title><rect x="30.1493%" y="229" width="0.2985%" height="15" fill="rgb(217,181,29)" fg:x="101" fg:w="1"/><text x="30.3993%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.30%)</title><rect x="30.4478%" y="229" width="0.2985%" height="15" fill="rgb(214,56,3)" fg:x="102" fg:w="1"/><text x="30.6978%" y="239.50"></text></g><g><title>rustls::common_state::CommonState::send_msg (1 samples, 0.30%)</title><rect x="30.7463%" y="229" width="0.2985%" height="15" fill="rgb(230,69,45)" fg:x="103" fg:w="1"/><text x="30.9963%" y="239.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::hash::Context as rustls::crypto::hash::Context&gt;::fork_finish (1 samples, 0.30%)</title><rect x="31.0448%" y="213" width="0.2985%" height="15" fill="rgb(224,201,50)" fg:x="104" fg:w="1"/><text x="31.2948%" y="223.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::hash::Context as rustls::crypto::hash::Context&gt;::update (1 samples, 0.30%)</title><rect x="31.3433%" y="213" width="0.2985%" height="15" fill="rgb(217,228,18)" fg:x="105" fg:w="1"/><text x="31.5933%" y="223.50"></text></g><g><title>aws_lc_0_21_1_EVP_DigestUpdate (1 samples, 0.30%)</title><rect x="31.3433%" y="197" width="0.2985%" height="15" fill="rgb(239,33,44)" fg:x="105" fg:w="1"/><text x="31.5933%" y="207.50"></text></g><g><title>sha384_update (1 samples, 0.30%)</title><rect x="31.3433%" y="181" width="0.2985%" height="15" fill="rgb(248,210,23)" fg:x="105" fg:w="1"/><text x="31.5933%" y="191.50"></text></g><g><title>aws_lc_0_21_1_SHA512_Update (1 samples, 0.30%)</title><rect x="31.3433%" y="165" width="0.2985%" height="15" fill="rgb(253,135,8)" fg:x="105" fg:w="1"/><text x="31.5933%" y="175.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="31.3433%" y="149" width="0.2985%" height="15" fill="rgb(217,98,21)" fg:x="105" fg:w="1"/><text x="31.5933%" y="159.50"></text></g><g><title>aws_lc_0_21_1_BN_uadd (1 samples, 0.30%)</title><rect x="31.6418%" y="69" width="0.2985%" height="15" fill="rgb(253,130,21)" fg:x="106" fg:w="1"/><text x="31.8918%" y="79.50"></text></g><g><title>aws_lc_0_21_1_bn_uadd_consttime (1 samples, 0.30%)</title><rect x="31.6418%" y="53" width="0.2985%" height="15" fill="rgb(207,81,54)" fg:x="106" fg:w="1"/><text x="31.8918%" y="63.50"></text></g><g><title>aws_lc_0_21_1_bn_add_words (1 samples, 0.30%)</title><rect x="31.6418%" y="37" width="0.2985%" height="15" fill="rgb(232,48,33)" fg:x="106" fg:w="1"/><text x="31.8918%" y="47.50"></text></g><g><title>aws_lc_0_21_1_bn_is_bit_set_words (1 samples, 0.30%)</title><rect x="31.9403%" y="69" width="0.2985%" height="15" fill="rgb(211,9,35)" fg:x="107" fg:w="1"/><text x="32.1903%" y="79.50"></text></g><g><title>aws_lc_0_21_1_BN_mod_inverse_blinded (3 samples, 0.90%)</title><rect x="31.6418%" y="101" width="0.8955%" height="15" fill="rgb(205,152,21)" fg:x="106" fg:w="3"/><text x="31.8918%" y="111.50"></text></g><g><title>aws_lc_0_21_1_BN_mod_inverse_odd (3 samples, 0.90%)</title><rect x="31.6418%" y="85" width="0.8955%" height="15" fill="rgb(249,21,27)" fg:x="106" fg:w="3"/><text x="31.8918%" y="95.50"></text></g><g><title>bn_cmp_words_consttime (1 samples, 0.30%)</title><rect x="32.2388%" y="69" width="0.2985%" height="15" fill="rgb(252,29,24)" fg:x="108" fg:w="1"/><text x="32.4888%" y="79.50"></text></g><g><title>bn_mulx4x_mont (1 samples, 0.30%)</title><rect x="32.5373%" y="85" width="0.2985%" height="15" fill="rgb(230,130,50)" fg:x="109" fg:w="1"/><text x="32.7873%" y="95.50"></text></g><g><title>aws_lc_0_21_1_BN_BLINDING_convert (6 samples, 1.79%)</title><rect x="31.6418%" y="117" width="1.7910%" height="15" fill="rgb(239,144,14)" fg:x="106" fg:w="6"/><text x="31.8918%" y="127.50">a..</text></g><g><title>aws_lc_0_21_1_BN_mod_mul_montgomery (3 samples, 0.90%)</title><rect x="32.5373%" y="101" width="0.8955%" height="15" fill="rgb(227,111,50)" fg:x="109" fg:w="3"/><text x="32.7873%" y="111.50"></text></g><g><title>bn_sqr8x_mont (2 samples, 0.60%)</title><rect x="32.8358%" y="85" width="0.5970%" height="15" fill="rgb(254,84,20)" fg:x="110" fg:w="2"/><text x="33.0858%" y="95.50"></text></g><g><title>aws_lc_0_21_1_bn_sqrx8x_internal (2 samples, 0.60%)</title><rect x="32.8358%" y="69" width="0.5970%" height="15" fill="rgb(232,90,48)" fg:x="110" fg:w="2"/><text x="33.0858%" y="79.50"></text></g><g><title>aws_lc_0_21_1_BN_from_montgomery (1 samples, 0.30%)</title><rect x="33.4328%" y="117" width="0.2985%" height="15" fill="rgb(253,63,47)" fg:x="112" fg:w="1"/><text x="33.6828%" y="127.50"></text></g><g><title>bn_from_montgomery_in_place (1 samples, 0.30%)</title><rect x="33.4328%" y="101" width="0.2985%" height="15" fill="rgb(251,146,35)" fg:x="112" fg:w="1"/><text x="33.6828%" y="111.50"></text></g><g><title>aws_lc_0_21_1_BN_mod_mul_montgomery (2 samples, 0.60%)</title><rect x="33.7313%" y="101" width="0.5970%" height="15" fill="rgb(229,192,35)" fg:x="113" fg:w="2"/><text x="33.9813%" y="111.50"></text></g><g><title>bn_sqr8x_mont (2 samples, 0.60%)</title><rect x="33.7313%" y="85" width="0.5970%" height="15" fill="rgb(225,68,9)" fg:x="113" fg:w="2"/><text x="33.9813%" y="95.50"></text></g><g><title>aws_lc_0_21_1_bn_sqrx8x_internal (2 samples, 0.60%)</title><rect x="33.7313%" y="69" width="0.5970%" height="15" fill="rgb(214,97,34)" fg:x="113" fg:w="2"/><text x="33.9813%" y="79.50"></text></g><g><title>aws_lc_0_21_1_BN_mod_exp_mont (3 samples, 0.90%)</title><rect x="33.7313%" y="117" width="0.8955%" height="15" fill="rgb(253,31,26)" fg:x="113" fg:w="3"/><text x="33.9813%" y="127.50"></text></g><g><title>aws_lc_0_21_1_BN_num_bits (1 samples, 0.30%)</title><rect x="34.3284%" y="101" width="0.2985%" height="15" fill="rgb(225,151,47)" fg:x="115" fg:w="1"/><text x="34.5784%" y="111.50"></text></g><g><title>aws_lc_0_21_1_bn_minimal_width (1 samples, 0.30%)</title><rect x="34.3284%" y="85" width="0.2985%" height="15" fill="rgb(206,185,9)" fg:x="115" fg:w="1"/><text x="34.5784%" y="95.50"></text></g><g><title>aws_lc_0_21_1_bn_gather5 (1 samples, 0.30%)</title><rect x="34.6269%" y="101" width="0.2985%" height="15" fill="rgb(249,65,17)" fg:x="116" fg:w="1"/><text x="34.8769%" y="111.50"></text></g><g><title>bn_mulx4x_mont_gather5 (3 samples, 0.90%)</title><rect x="34.9254%" y="101" width="0.8955%" height="15" fill="rgb(220,110,10)" fg:x="117" fg:w="3"/><text x="35.1754%" y="111.50"></text></g><g><title>mulx4x_internal (3 samples, 0.90%)</title><rect x="34.9254%" y="85" width="0.8955%" height="15" fill="rgb(222,198,49)" fg:x="117" fg:w="3"/><text x="35.1754%" y="95.50"></text></g><g><title>__bn_postx4x_internal (3 samples, 0.90%)</title><rect x="36.1194%" y="85" width="0.8955%" height="15" fill="rgb(239,81,13)" fg:x="121" fg:w="3"/><text x="36.3694%" y="95.50"></text></g><g><title>aws_lc_0_21_1_bn_sqrx8x_internal (109 samples, 32.54%)</title><rect x="37.0149%" y="85" width="32.5373%" height="15" fill="rgb(216,128,11)" fg:x="124" fg:w="109"/><text x="37.2649%" y="95.50">aws_lc_0_21_1_bn_sqrx8x_internal</text></g><g><title>bn_powerx5 (152 samples, 45.37%)</title><rect x="35.8209%" y="101" width="45.3731%" height="15" fill="rgb(247,156,8)" fg:x="120" fg:w="152"/><text x="36.0709%" y="111.50">bn_powerx5</text></g><g><title>mulx4x_internal (39 samples, 11.64%)</title><rect x="69.5522%" y="85" width="11.6418%" height="15" fill="rgb(219,173,1)" fg:x="233" fg:w="39"/><text x="69.8022%" y="95.50">mulx4x_internal</text></g><g><title>rustls::server::tls13::client_hello::emit_certificate_verify_tls13 (171 samples, 51.04%)</title><rect x="31.0448%" y="229" width="51.0448%" height="15" fill="rgb(227,42,24)" fg:x="104" fg:w="171"/><text x="31.2948%" y="239.50">rustls::server::tls13::client_hello::emit_certificate_verify_tls13</text></g><g><title>&lt;rustls::crypto::aws_lc_rs::sign::RsaSigner as rustls::crypto::signer::Signer&gt;::sign (169 samples, 50.45%)</title><rect x="31.6418%" y="213" width="50.4478%" height="15" fill="rgb(253,219,50)" fg:x="106" fg:w="169"/><text x="31.8918%" y="223.50">&lt;rustls::crypto::aws_lc_rs::sign::RsaSigner as rustls::crypto::signer::Signer&gt;::sign</text></g><g><title>aws_lc_0_21_1_EVP_DigestSignFinal (169 samples, 50.45%)</title><rect x="31.6418%" y="197" width="50.4478%" height="15" fill="rgb(215,191,54)" fg:x="106" fg:w="169"/><text x="31.8918%" y="207.50">aws_lc_0_21_1_EVP_DigestSignFinal</text></g><g><title>pkey_rsa_sign (169 samples, 50.45%)</title><rect x="31.6418%" y="181" width="50.4478%" height="15" fill="rgb(238,83,12)" fg:x="106" fg:w="169"/><text x="31.8918%" y="191.50">pkey_rsa_sign</text></g><g><title>aws_lc_0_21_1_RSA_sign_pss_mgf1 (169 samples, 50.45%)</title><rect x="31.6418%" y="165" width="50.4478%" height="15" fill="rgb(205,124,9)" fg:x="106" fg:w="169"/><text x="31.8918%" y="175.50">aws_lc_0_21_1_RSA_sign_pss_mgf1</text></g><g><title>aws_lc_0_21_1_rsa_default_sign_raw (169 samples, 50.45%)</title><rect x="31.6418%" y="149" width="50.4478%" height="15" fill="rgb(253,174,7)" fg:x="106" fg:w="169"/><text x="31.8918%" y="159.50">aws_lc_0_21_1_rsa_default_sign_raw</text></g><g><title>aws_lc_0_21_1_rsa_default_private_transform (169 samples, 50.45%)</title><rect x="31.6418%" y="133" width="50.4478%" height="15" fill="rgb(206,134,49)" fg:x="106" fg:w="169"/><text x="31.8918%" y="143.50">aws_lc_0_21_1_rsa_default_private_transform</text></g><g><title>aws_lc_0_21_1_BN_mod_exp_mont_consttime (159 samples, 47.46%)</title><rect x="34.6269%" y="117" width="47.4627%" height="15" fill="rgb(221,89,20)" fg:x="116" fg:w="159"/><text x="34.8769%" y="127.50">aws_lc_0_21_1_BN_mod_exp_mont_consttime</text></g><g><title>bn_sqr8x_mont (3 samples, 0.90%)</title><rect x="81.1940%" y="101" width="0.8955%" height="15" fill="rgb(240,205,13)" fg:x="272" fg:w="3"/><text x="81.4440%" y="111.50"></text></g><g><title>aws_lc_0_21_1_bn_sqrx8x_internal (3 samples, 0.90%)</title><rect x="81.1940%" y="85" width="0.8955%" height="15" fill="rgb(237,174,32)" fg:x="272" fg:w="3"/><text x="81.4440%" y="95.50"></text></g><g><title>rustls::server::tls13::client_hello::emit_compressed_certificate_tls13 (3 samples, 0.90%)</title><rect x="82.0896%" y="229" width="0.8955%" height="15" fill="rgb(226,12,15)" fg:x="275" fg:w="3"/><text x="82.3396%" y="239.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::hash::Context as rustls::crypto::hash::Context&gt;::update (3 samples, 0.90%)</title><rect x="82.0896%" y="213" width="0.8955%" height="15" fill="rgb(245,160,52)" fg:x="275" fg:w="3"/><text x="82.3396%" y="223.50"></text></g><g><title>aws_lc_0_21_1_EVP_DigestUpdate (3 samples, 0.90%)</title><rect x="82.0896%" y="197" width="0.8955%" height="15" fill="rgb(253,80,21)" fg:x="275" fg:w="3"/><text x="82.3396%" y="207.50"></text></g><g><title>sha384_update (3 samples, 0.90%)</title><rect x="82.0896%" y="181" width="0.8955%" height="15" fill="rgb(231,225,22)" fg:x="275" fg:w="3"/><text x="82.3396%" y="191.50"></text></g><g><title>aws_lc_0_21_1_SHA512_Update (3 samples, 0.90%)</title><rect x="82.0896%" y="165" width="0.8955%" height="15" fill="rgb(253,185,12)" fg:x="275" fg:w="3"/><text x="82.3396%" y="175.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (3 samples, 0.90%)</title><rect x="82.0896%" y="149" width="0.8955%" height="15" fill="rgb(234,197,21)" fg:x="275" fg:w="3"/><text x="82.3396%" y="159.50"></text></g><g><title>rustls::tls13::key_schedule::KeySchedule::set_encrypter (1 samples, 0.30%)</title><rect x="82.9851%" y="213" width="0.2985%" height="15" fill="rgb(210,47,30)" fg:x="278" fg:w="1"/><text x="83.2351%" y="223.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::tls13::RingHkdfExpander as rustls::crypto::tls13::HkdfExpander&gt;::expand_slice (1 samples, 0.30%)</title><rect x="82.9851%" y="197" width="0.2985%" height="15" fill="rgb(246,139,27)" fg:x="278" fg:w="1"/><text x="83.2351%" y="207.50"></text></g><g><title>aws_lc_rs::hkdf::Okm&lt;L&gt;::fill (1 samples, 0.30%)</title><rect x="82.9851%" y="181" width="0.2985%" height="15" fill="rgb(226,130,16)" fg:x="278" fg:w="1"/><text x="83.2351%" y="191.50"></text></g><g><title>aws_lc_0_21_1_HKDF_expand (1 samples, 0.30%)</title><rect x="82.9851%" y="165" width="0.2985%" height="15" fill="rgb(237,208,20)" fg:x="278" fg:w="1"/><text x="83.2351%" y="175.50"></text></g><g><title>aws_lc_0_21_1_HMAC_Final (1 samples, 0.30%)</title><rect x="82.9851%" y="149" width="0.2985%" height="15" fill="rgb(245,186,28)" fg:x="278" fg:w="1"/><text x="83.2351%" y="159.50"></text></g><g><title>aws_lc_0_21_1_SHA384_Final (1 samples, 0.30%)</title><rect x="82.9851%" y="133" width="0.2985%" height="15" fill="rgb(238,105,39)" fg:x="278" fg:w="1"/><text x="83.2351%" y="143.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="82.9851%" y="117" width="0.2985%" height="15" fill="rgb(253,228,11)" fg:x="278" fg:w="1"/><text x="83.2351%" y="127.50"></text></g><g><title>aws_lc_0_21_1_HKDF_expand (1 samples, 0.30%)</title><rect x="83.2836%" y="133" width="0.2985%" height="15" fill="rgb(224,136,38)" fg:x="279" fg:w="1"/><text x="83.5336%" y="143.50"></text></g><g><title>aws_lc_0_21_1_HMAC_Final (1 samples, 0.30%)</title><rect x="83.2836%" y="117" width="0.2985%" height="15" fill="rgb(211,3,25)" fg:x="279" fg:w="1"/><text x="83.5336%" y="127.50"></text></g><g><title>aws_lc_0_21_1_SHA384_Final (1 samples, 0.30%)</title><rect x="83.2836%" y="101" width="0.2985%" height="15" fill="rgb(238,66,34)" fg:x="279" fg:w="1"/><text x="83.5336%" y="111.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="83.2836%" y="85" width="0.2985%" height="15" fill="rgb(223,188,11)" fg:x="279" fg:w="1"/><text x="83.5336%" y="95.50"></text></g><g><title>rustls::server::tls13::client_hello::emit_finished_tls13 (4 samples, 1.19%)</title><rect x="82.9851%" y="229" width="1.1940%" height="15" fill="rgb(221,10,35)" fg:x="278" fg:w="4"/><text x="83.2351%" y="239.50"></text></g><g><title>rustls::tls13::key_schedule::KeyScheduleTraffic::new (3 samples, 0.90%)</title><rect x="83.2836%" y="213" width="0.8955%" height="15" fill="rgb(223,18,44)" fg:x="279" fg:w="3"/><text x="83.5336%" y="223.50"></text></g><g><title>rustls::tls13::key_schedule::KeySchedule::derive_logged_secret (3 samples, 0.90%)</title><rect x="83.2836%" y="197" width="0.8955%" height="15" fill="rgb(220,97,41)" fg:x="279" fg:w="3"/><text x="83.5336%" y="207.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::tls13::RingHkdfExpander as rustls::crypto::tls13::HkdfExpander&gt;::expand_block (3 samples, 0.90%)</title><rect x="83.2836%" y="181" width="0.8955%" height="15" fill="rgb(206,95,45)" fg:x="279" fg:w="3"/><text x="83.5336%" y="191.50"></text></g><g><title>aws_lc_rs::hkdf::Okm&lt;L&gt;::fill (3 samples, 0.90%)</title><rect x="83.2836%" y="165" width="0.8955%" height="15" fill="rgb(209,96,13)" fg:x="279" fg:w="3"/><text x="83.5336%" y="175.50"></text></g><g><title>aws_lc_0_21_1_HKDF (3 samples, 0.90%)</title><rect x="83.2836%" y="149" width="0.8955%" height="15" fill="rgb(237,39,34)" fg:x="279" fg:w="3"/><text x="83.5336%" y="159.50"></text></g><g><title>aws_lc_0_21_1_HKDF_extract (2 samples, 0.60%)</title><rect x="83.5821%" y="133" width="0.5970%" height="15" fill="rgb(213,49,47)" fg:x="280" fg:w="2"/><text x="83.8321%" y="143.50"></text></g><g><title>aws_lc_0_21_1_HMAC (2 samples, 0.60%)</title><rect x="83.5821%" y="117" width="0.5970%" height="15" fill="rgb(205,107,27)" fg:x="280" fg:w="2"/><text x="83.8321%" y="127.50"></text></g><g><title>aws_lc_0_21_1_HMAC_Final (1 samples, 0.30%)</title><rect x="83.8806%" y="101" width="0.2985%" height="15" fill="rgb(212,142,9)" fg:x="281" fg:w="1"/><text x="84.1306%" y="111.50"></text></g><g><title>aws_lc_0_21_1_SHA384_Final (1 samples, 0.30%)</title><rect x="83.8806%" y="85" width="0.2985%" height="15" fill="rgb(226,182,0)" fg:x="281" fg:w="1"/><text x="84.1306%" y="95.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="83.8806%" y="69" width="0.2985%" height="15" fill="rgb(231,3,53)" fg:x="281" fg:w="1"/><text x="84.1306%" y="79.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::hash::Context as rustls::crypto::hash::Context&gt;::finish (1 samples, 0.30%)</title><rect x="84.1791%" y="213" width="0.2985%" height="15" fill="rgb(246,111,28)" fg:x="282" fg:w="1"/><text x="84.4291%" y="223.50"></text></g><g><title>aws_lc_0_21_1_EVP_DigestFinal (1 samples, 0.30%)</title><rect x="84.1791%" y="197" width="0.2985%" height="15" fill="rgb(254,183,7)" fg:x="282" fg:w="1"/><text x="84.4291%" y="207.50"></text></g><g><title>aws_lc_0_21_1_EVP_DigestFinal_ex (1 samples, 0.30%)</title><rect x="84.1791%" y="181" width="0.2985%" height="15" fill="rgb(247,177,28)" fg:x="282" fg:w="1"/><text x="84.4291%" y="191.50"></text></g><g><title>sha384_final (1 samples, 0.30%)</title><rect x="84.1791%" y="165" width="0.2985%" height="15" fill="rgb(244,43,1)" fg:x="282" fg:w="1"/><text x="84.4291%" y="175.50"></text></g><g><title>aws_lc_0_21_1_SHA384_Final (1 samples, 0.30%)</title><rect x="84.1791%" y="149" width="0.2985%" height="15" fill="rgb(207,2,35)" fg:x="282" fg:w="1"/><text x="84.4291%" y="159.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="84.1791%" y="133" width="0.2985%" height="15" fill="rgb(213,83,22)" fg:x="282" fg:w="1"/><text x="84.4291%" y="143.50"></text></g><g><title>rustls::crypto::SupportedKxGroup::start_and_complete (1 samples, 0.30%)</title><rect x="84.4776%" y="213" width="0.2985%" height="15" fill="rgb(246,212,13)" fg:x="283" fg:w="1"/><text x="84.7276%" y="223.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::kx::KxGroup as rustls::crypto::SupportedKxGroup&gt;::start (1 samples, 0.30%)</title><rect x="84.4776%" y="197" width="0.2985%" height="15" fill="rgb(213,127,46)" fg:x="283" fg:w="1"/><text x="84.7276%" y="207.50"></text></g><g><title>aws_lc_0_21_1_EVP_PKEY_keygen (1 samples, 0.30%)</title><rect x="84.4776%" y="181" width="0.2985%" height="15" fill="rgb(219,215,39)" fg:x="283" fg:w="1"/><text x="84.7276%" y="191.50"></text></g><g><title>pkey_x25519_keygen (1 samples, 0.30%)</title><rect x="84.4776%" y="165" width="0.2985%" height="15" fill="rgb(227,99,17)" fg:x="283" fg:w="1"/><text x="84.7276%" y="175.50"></text></g><g><title>aws_lc_0_21_1_X25519_keypair (1 samples, 0.30%)</title><rect x="84.4776%" y="149" width="0.2985%" height="15" fill="rgb(208,155,18)" fg:x="283" fg:w="1"/><text x="84.7276%" y="159.50"></text></g><g><title>aws_lc_0_21_1_RAND_bytes (1 samples, 0.30%)</title><rect x="84.4776%" y="133" width="0.2985%" height="15" fill="rgb(223,204,38)" fg:x="283" fg:w="1"/><text x="84.7276%" y="143.50"></text></g><g><title>aws_lc_0_21_1_RAND_bytes_with_additional_data.part.0 (1 samples, 0.30%)</title><rect x="84.4776%" y="117" width="0.2985%" height="15" fill="rgb(212,114,21)" fg:x="283" fg:w="1"/><text x="84.7276%" y="127.50"></text></g><g><title>aws_lc_0_21_1_CTR_DRBG_generate (1 samples, 0.30%)</title><rect x="84.4776%" y="101" width="0.2985%" height="15" fill="rgb(250,74,13)" fg:x="283" fg:w="1"/><text x="84.7276%" y="111.50"></text></g><g><title>ctr_drbg_update.part.0 (1 samples, 0.30%)</title><rect x="84.4776%" y="85" width="0.2985%" height="15" fill="rgb(234,7,1)" fg:x="283" fg:w="1"/><text x="84.7276%" y="95.50"></text></g><g><title>aws_lc_0_21_1_aes_ctr_set_key (1 samples, 0.30%)</title><rect x="84.4776%" y="69" width="0.2985%" height="15" fill="rgb(207,138,31)" fg:x="283" fg:w="1"/><text x="84.7276%" y="79.50"></text></g><g><title>aws_lc_0_21_1_aes_hw_set_encrypt_key (1 samples, 0.30%)</title><rect x="84.4776%" y="53" width="0.2985%" height="15" fill="rgb(215,186,42)" fg:x="283" fg:w="1"/><text x="84.7276%" y="63.50"></text></g><g><title>rustls::tls13::key_schedule::KeyScheduleHandshakeStart::into_handshake (1 samples, 0.30%)</title><rect x="84.7761%" y="213" width="0.2985%" height="15" fill="rgb(229,205,49)" fg:x="284" fg:w="1"/><text x="85.0261%" y="223.50"></text></g><g><title>rustls::tls13::key_schedule::KeySchedule::derive_logged_secret (1 samples, 0.30%)</title><rect x="84.7761%" y="197" width="0.2985%" height="15" fill="rgb(216,156,32)" fg:x="284" fg:w="1"/><text x="85.0261%" y="207.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::tls13::RingHkdfExpander as rustls::crypto::tls13::HkdfExpander&gt;::expand_block (1 samples, 0.30%)</title><rect x="84.7761%" y="181" width="0.2985%" height="15" fill="rgb(238,7,21)" fg:x="284" fg:w="1"/><text x="85.0261%" y="191.50"></text></g><g><title>aws_lc_rs::hkdf::Okm&lt;L&gt;::fill (1 samples, 0.30%)</title><rect x="84.7761%" y="165" width="0.2985%" height="15" fill="rgb(249,190,22)" fg:x="284" fg:w="1"/><text x="85.0261%" y="175.50"></text></g><g><title>aws_lc_0_21_1_HKDF (1 samples, 0.30%)</title><rect x="84.7761%" y="149" width="0.2985%" height="15" fill="rgb(253,51,31)" fg:x="284" fg:w="1"/><text x="85.0261%" y="159.50"></text></g><g><title>aws_lc_0_21_1_HKDF_expand (1 samples, 0.30%)</title><rect x="84.7761%" y="133" width="0.2985%" height="15" fill="rgb(237,90,54)" fg:x="284" fg:w="1"/><text x="85.0261%" y="143.50"></text></g><g><title>aws_lc_0_21_1_HMAC_Init_ex (1 samples, 0.30%)</title><rect x="84.7761%" y="117" width="0.2985%" height="15" fill="rgb(250,214,33)" fg:x="284" fg:w="1"/><text x="85.0261%" y="127.50"></text></g><g><title>aws_lc_0_21_1_SHA512_Update (1 samples, 0.30%)</title><rect x="84.7761%" y="101" width="0.2985%" height="15" fill="rgb(237,10,49)" fg:x="284" fg:w="1"/><text x="85.0261%" y="111.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="84.7761%" y="85" width="0.2985%" height="15" fill="rgb(241,56,36)" fg:x="284" fg:w="1"/><text x="85.0261%" y="95.50"></text></g><g><title>aws_lc_0_21_1_HMAC_Final (1 samples, 0.30%)</title><rect x="85.3731%" y="133" width="0.2985%" height="15" fill="rgb(227,164,12)" fg:x="286" fg:w="1"/><text x="85.6231%" y="143.50"></text></g><g><title>aws_lc_0_21_1_SHA384_Final (1 samples, 0.30%)</title><rect x="85.3731%" y="117" width="0.2985%" height="15" fill="rgb(249,149,35)" fg:x="286" fg:w="1"/><text x="85.6231%" y="127.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="85.3731%" y="101" width="0.2985%" height="15" fill="rgb(238,227,50)" fg:x="286" fg:w="1"/><text x="85.6231%" y="111.50"></text></g><g><title>hello_world_tower_hyper_tls_tcp::start_server::{{closure}}::{{closure}} (202 samples, 60.30%)</title><rect x="25.6716%" y="293" width="60.2985%" height="15" fill="rgb(235,102,45)" fg:x="86" fg:w="202"/><text x="25.9216%" y="303.50">hello_world_tower_hyper_tls_tcp::start_server::{{closure}}::{{closure}}</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (189 samples, 56.42%)</title><rect x="29.5522%" y="277" width="56.4179%" height="15" fill="rgb(211,10,38)" fg:x="99" fg:w="189"/><text x="29.8022%" y="287.50">tokio_rustls::common::Stream&lt;IO,C&gt;::read_io</text></g><g><title>&lt;rustls::server::hs::ExpectClientHello as rustls::common_state::State&lt;rustls::server::server_conn::ServerConnectionData&gt;&gt;::handle (189 samples, 56.42%)</title><rect x="29.5522%" y="261" width="56.4179%" height="15" fill="rgb(219,77,48)" fg:x="99" fg:w="189"/><text x="29.8022%" y="271.50">&lt;rustls::server::hs::ExpectClientHello as rustls::common_state::State&lt;rustls::server::server_..</text></g><g><title>rustls::server::hs::ExpectClientHello::with_certified_key (188 samples, 56.12%)</title><rect x="29.8507%" y="245" width="56.1194%" height="15" fill="rgb(246,6,15)" fg:x="100" fg:w="188"/><text x="30.1007%" y="255.50">rustls::server::hs::ExpectClientHello::with_certified_key</text></g><g><title>rustls::server::tls13::client_hello::emit_server_hello (6 samples, 1.79%)</title><rect x="84.1791%" y="229" width="1.7910%" height="15" fill="rgb(207,220,2)" fg:x="282" fg:w="6"/><text x="84.4291%" y="239.50">r..</text></g><g><title>rustls::tls13::key_schedule::KeySchedulePreHandshake::into_handshake (3 samples, 0.90%)</title><rect x="85.0746%" y="213" width="0.8955%" height="15" fill="rgb(242,48,14)" fg:x="285" fg:w="3"/><text x="85.3246%" y="223.50"></text></g><g><title>&lt;rustls::crypto::aws_lc_rs::tls13::RingHkdfExpander as rustls::crypto::tls13::HkdfExpander&gt;::expand_block (3 samples, 0.90%)</title><rect x="85.0746%" y="197" width="0.8955%" height="15" fill="rgb(218,19,27)" fg:x="285" fg:w="3"/><text x="85.3246%" y="207.50"></text></g><g><title>aws_lc_rs::hkdf::Okm&lt;L&gt;::fill (2 samples, 0.60%)</title><rect x="85.3731%" y="181" width="0.5970%" height="15" fill="rgb(228,0,35)" fg:x="286" fg:w="2"/><text x="85.6231%" y="191.50"></text></g><g><title>aws_lc_0_21_1_HKDF (2 samples, 0.60%)</title><rect x="85.3731%" y="165" width="0.5970%" height="15" fill="rgb(244,142,54)" fg:x="286" fg:w="2"/><text x="85.6231%" y="175.50"></text></g><g><title>aws_lc_0_21_1_HKDF_expand (2 samples, 0.60%)</title><rect x="85.3731%" y="149" width="0.5970%" height="15" fill="rgb(243,217,40)" fg:x="286" fg:w="2"/><text x="85.6231%" y="159.50"></text></g><g><title>aws_lc_0_21_1_HMAC_Init_ex (1 samples, 0.30%)</title><rect x="85.6716%" y="133" width="0.2985%" height="15" fill="rgb(207,114,16)" fg:x="287" fg:w="1"/><text x="85.9216%" y="143.50"></text></g><g><title>aws_lc_0_21_1_SHA512_Update (1 samples, 0.30%)</title><rect x="85.6716%" y="117" width="0.2985%" height="15" fill="rgb(224,33,25)" fg:x="287" fg:w="1"/><text x="85.9216%" y="127.50"></text></g><g><title>aws_lc_0_21_1_sha512_block_data_order_nohw (1 samples, 0.30%)</title><rect x="85.6716%" y="101" width="0.2985%" height="15" fill="rgb(230,93,54)" fg:x="287" fg:w="1"/><text x="85.9216%" y="111.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::get (3 samples, 0.90%)</title><rect x="85.9701%" y="293" width="0.8955%" height="15" fill="rgb(224,56,24)" fg:x="288" fg:w="3"/><text x="86.2201%" y="303.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.30%)</title><rect x="86.5672%" y="277" width="0.2985%" height="15" fill="rgb(235,189,50)" fg:x="290" fg:w="1"/><text x="86.8172%" y="287.50"></text></g><g><title>_rjem_je_tsd_fetch_slow (1 samples, 0.30%)</title><rect x="86.5672%" y="261" width="0.2985%" height="15" fill="rgb(242,173,8)" fg:x="290" fg:w="1"/><text x="86.8172%" y="271.50"></text></g><g><title>_rjem_je_tsd_tcache_enabled_data_init (1 samples, 0.30%)</title><rect x="86.5672%" y="245" width="0.2985%" height="15" fill="rgb(209,206,10)" fg:x="290" fg:w="1"/><text x="86.8172%" y="255.50"></text></g><g><title>_rjem_je_tsd_tcache_data_init (1 samples, 0.30%)</title><rect x="86.5672%" y="229" width="0.2985%" height="15" fill="rgb(213,182,44)" fg:x="290" fg:w="1"/><text x="86.8172%" y="239.50"></text></g><g><title>_rjem_je_large_palloc (1 samples, 0.30%)</title><rect x="86.5672%" y="213" width="0.2985%" height="15" fill="rgb(243,51,15)" fg:x="290" fg:w="1"/><text x="86.8172%" y="223.50"></text></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.30%)</title><rect x="86.5672%" y="197" width="0.2985%" height="15" fill="rgb(241,13,14)" fg:x="290" fg:w="1"/><text x="86.8172%" y="207.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.30%)</title><rect x="86.5672%" y="181" width="0.2985%" height="15" fill="rgb(239,147,24)" fg:x="290" fg:w="1"/><text x="86.8172%" y="191.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.30%)</title><rect x="86.5672%" y="165" width="0.2985%" height="15" fill="rgb(223,129,16)" fg:x="290" fg:w="1"/><text x="86.8172%" y="175.50"></text></g><g><title>pac_alloc_real (1 samples, 0.30%)</title><rect x="86.5672%" y="149" width="0.2985%" height="15" fill="rgb(209,169,13)" fg:x="290" fg:w="1"/><text x="86.8172%" y="159.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.30%)</title><rect x="86.5672%" y="133" width="0.2985%" height="15" fill="rgb(235,159,41)" fg:x="290" fg:w="1"/><text x="86.8172%" y="143.50"></text></g><g><title>extent_recycle (1 samples, 0.30%)</title><rect x="86.5672%" y="117" width="0.2985%" height="15" fill="rgb(223,219,48)" fg:x="290" fg:w="1"/><text x="86.8172%" y="127.50"></text></g><g><title>_rjem_je_eset_remove (1 samples, 0.30%)</title><rect x="86.5672%" y="101" width="0.2985%" height="15" fill="rgb(236,80,13)" fg:x="290" fg:w="1"/><text x="86.8172%" y="111.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.30%)</title><rect x="87.4627%" y="197" width="0.2985%" height="15" fill="rgb(213,5,6)" fg:x="293" fg:w="1"/><text x="87.7127%" y="207.50"></text></g><g><title>epoll_ctl (1 samples, 0.30%)</title><rect x="87.4627%" y="181" width="0.2985%" height="15" fill="rgb(205,59,21)" fg:x="293" fg:w="1"/><text x="87.7127%" y="191.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3 samples, 0.90%)</title><rect x="87.1642%" y="229" width="0.8955%" height="15" fill="rgb(247,137,35)" fg:x="292" fg:w="3"/><text x="87.4142%" y="239.50"></text></g><g><title>tokio::net::tcp::socket::TcpSocket::connect::{{closure}} (2 samples, 0.60%)</title><rect x="87.4627%" y="213" width="0.5970%" height="15" fill="rgb(242,208,28)" fg:x="293" fg:w="2"/><text x="87.7127%" y="223.50"></text></g><g><title>__close (1 samples, 0.30%)</title><rect x="87.7612%" y="197" width="0.2985%" height="15" fill="rgb(245,62,25)" fg:x="294" fg:w="1"/><text x="88.0112%" y="207.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (4 samples, 1.19%)</title><rect x="87.1642%" y="245" width="1.1940%" height="15" fill="rgb(233,99,54)" fg:x="292" fg:w="4"/><text x="87.4142%" y="255.50"></text></g><g><title>setsockopt (1 samples, 0.30%)</title><rect x="88.0597%" y="229" width="0.2985%" height="15" fill="rgb(213,10,37)" fg:x="295" fg:w="1"/><text x="88.3097%" y="239.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (5 samples, 1.49%)</title><rect x="87.1642%" y="277" width="1.4925%" height="15" fill="rgb(235,143,30)" fg:x="292" fg:w="5"/><text x="87.4142%" y="287.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (5 samples, 1.49%)</title><rect x="87.1642%" y="261" width="1.4925%" height="15" fill="rgb(250,146,33)" fg:x="292" fg:w="5"/><text x="87.4142%" y="271.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.30%)</title><rect x="88.3582%" y="245" width="0.2985%" height="15" fill="rgb(226,198,42)" fg:x="296" fg:w="1"/><text x="88.6082%" y="255.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.30%)</title><rect x="88.3582%" y="229" width="0.2985%" height="15" fill="rgb(222,55,6)" fg:x="296" fg:w="1"/><text x="88.6082%" y="239.50"></text></g><g><title>_rjem_je_tcache_gc_dalloc_event_handler (1 samples, 0.30%)</title><rect x="88.3582%" y="213" width="0.2985%" height="15" fill="rgb(213,224,31)" fg:x="296" fg:w="1"/><text x="88.6082%" y="223.50"></text></g><g><title>tcache_gc_small (1 samples, 0.30%)</title><rect x="88.3582%" y="197" width="0.2985%" height="15" fill="rgb(226,103,35)" fg:x="296" fg:w="1"/><text x="88.6082%" y="207.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.30%)</title><rect x="88.3582%" y="181" width="0.2985%" height="15" fill="rgb(205,66,45)" fg:x="296" fg:w="1"/><text x="88.6082%" y="191.50"></text></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.30%)</title><rect x="88.3582%" y="165" width="0.2985%" height="15" fill="rgb(226,51,42)" fg:x="296" fg:w="1"/><text x="88.6082%" y="175.50"></text></g><g><title>pac_dalloc_impl (1 samples, 0.30%)</title><rect x="88.3582%" y="149" width="0.2985%" height="15" fill="rgb(206,69,1)" fg:x="296" fg:w="1"/><text x="88.6082%" y="159.50"></text></g><g><title>_rjem_je_extent_record (1 samples, 0.30%)</title><rect x="88.3582%" y="133" width="0.2985%" height="15" fill="rgb(213,228,47)" fg:x="296" fg:w="1"/><text x="88.6082%" y="143.50"></text></g><g><title>extent_try_coalesce_impl (1 samples, 0.30%)</title><rect x="88.3582%" y="117" width="0.2985%" height="15" fill="rgb(224,204,18)" fg:x="296" fg:w="1"/><text x="88.6082%" y="127.50"></text></g><g><title>_rjem_je_emap_try_acquire_edata_neighbor (1 samples, 0.30%)</title><rect x="88.3582%" y="101" width="0.2985%" height="15" fill="rgb(253,187,47)" fg:x="296" fg:w="1"/><text x="88.6082%" y="111.50"></text></g><g><title>emap_try_acquire_edata_neighbor_impl (1 samples, 0.30%)</title><rect x="88.3582%" y="85" width="0.2985%" height="15" fill="rgb(232,61,2)" fg:x="296" fg:w="1"/><text x="88.6082%" y="95.50"></text></g><g><title>&lt;http::uri::Uri as core::clone::Clone&gt;::clone (1 samples, 0.30%)</title><rect x="88.6567%" y="277" width="0.2985%" height="15" fill="rgb(213,132,35)" fg:x="297" fg:w="1"/><text x="88.9067%" y="287.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.30%)</title><rect x="88.9552%" y="261" width="0.2985%" height="15" fill="rgb(247,33,21)" fg:x="298" fg:w="1"/><text x="89.2052%" y="271.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (1 samples, 0.30%)</title><rect x="89.2537%" y="261" width="0.2985%" height="15" fill="rgb(233,71,46)" fg:x="299" fg:w="1"/><text x="89.5037%" y="271.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.30%)</title><rect x="89.2537%" y="245" width="0.2985%" height="15" fill="rgb(222,173,43)" fg:x="299" fg:w="1"/><text x="89.5037%" y="255.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (3 samples, 0.90%)</title><rect x="88.9552%" y="277" width="0.8955%" height="15" fill="rgb(249,218,47)" fg:x="298" fg:w="3"/><text x="89.2052%" y="287.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.30%)</title><rect x="89.5522%" y="261" width="0.2985%" height="15" fill="rgb(254,185,48)" fg:x="300" fg:w="1"/><text x="89.8022%" y="271.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (1 samples, 0.30%)</title><rect x="90.4478%" y="245" width="0.2985%" height="15" fill="rgb(252,165,50)" fg:x="303" fg:w="1"/><text x="90.6978%" y="255.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (3 samples, 0.90%)</title><rect x="91.3433%" y="197" width="0.8955%" height="15" fill="rgb(206,219,6)" fg:x="306" fg:w="3"/><text x="91.5933%" y="207.50"></text></g><g><title>syscall (2 samples, 0.60%)</title><rect x="91.6418%" y="181" width="0.5970%" height="15" fill="rgb(212,212,45)" fg:x="307" fg:w="2"/><text x="91.8918%" y="191.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (12 samples, 3.58%)</title><rect x="89.8507%" y="277" width="3.5821%" height="15" fill="rgb(221,31,9)" fg:x="301" fg:w="12"/><text x="90.1007%" y="287.50">&lt;hyp..</text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (12 samples, 3.58%)</title><rect x="89.8507%" y="261" width="3.5821%" height="15" fill="rgb(234,198,39)" fg:x="301" fg:w="12"/><text x="90.1007%" y="271.50">&lt;fut..</text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (9 samples, 2.69%)</title><rect x="90.7463%" y="245" width="2.6866%" height="15" fill="rgb(252,145,46)" fg:x="304" fg:w="9"/><text x="90.9963%" y="255.50">&lt;h..</text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (9 samples, 2.69%)</title><rect x="90.7463%" y="229" width="2.6866%" height="15" fill="rgb(237,149,0)" fg:x="304" fg:w="9"/><text x="90.9963%" y="239.50">&lt;h..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (9 samples, 2.69%)</title><rect x="90.7463%" y="213" width="2.6866%" height="15" fill="rgb(229,65,5)" fg:x="304" fg:w="9"/><text x="90.9963%" y="223.50">to..</text></g><g><title>syscall (4 samples, 1.19%)</title><rect x="92.2388%" y="197" width="1.1940%" height="15" fill="rgb(235,60,36)" fg:x="309" fg:w="4"/><text x="92.4888%" y="207.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.30%)</title><rect x="93.4328%" y="277" width="0.2985%" height="15" fill="rgb(222,47,18)" fg:x="313" fg:w="1"/><text x="93.6828%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::request::Parts&gt; (1 samples, 0.30%)</title><rect x="93.7313%" y="277" width="0.2985%" height="15" fill="rgb(235,114,22)" fg:x="314" fg:w="1"/><text x="93.9813%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (1 samples, 0.30%)</title><rect x="93.7313%" y="261" width="0.2985%" height="15" fill="rgb(209,167,11)" fg:x="314" fg:w="1"/><text x="93.9813%" y="271.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.30%)</title><rect x="93.7313%" y="245" width="0.2985%" height="15" fill="rgb(251,73,18)" fg:x="314" fg:w="1"/><text x="93.9813%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;hyper_rustls::connector::HttpsConnector&lt;hyper_util::client::legacy::connect::http::HttpConnector&gt;,http_body_util::empty::Empty&lt;bytes::bytes::Bytes&gt;&gt;&gt;.5092 (1 samples, 0.30%)</title><rect x="94.0299%" y="277" width="0.2985%" height="15" fill="rgb(217,60,17)" fg:x="315" fg:w="1"/><text x="94.2799%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_rustls::connector::HttpsConnector&lt;hyper_util::client::legacy::connect::http::HttpConnector&gt;&gt; (1 samples, 0.30%)</title><rect x="94.0299%" y="261" width="0.2985%" height="15" fill="rgb(224,36,37)" fg:x="315" fg:w="1"/><text x="94.2799%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[futures_channel::oneshot::Sender&lt;hyper_util::client::legacy::client::PoolClient&lt;http_body_util::empty::Empty&lt;bytes::bytes::Bytes&gt;&gt;&gt;]&gt; (2 samples, 0.60%)</title><rect x="95.8209%" y="261" width="0.5970%" height="15" fill="rgb(211,21,32)" fg:x="321" fg:w="2"/><text x="96.0709%" y="271.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (2 samples, 0.60%)</title><rect x="96.4179%" y="261" width="0.5970%" height="15" fill="rgb(231,55,48)" fg:x="323" fg:w="2"/><text x="96.6679%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Checkout&lt;hyper_util::client::legacy::client::PoolClient&lt;http_body_util::empty::Empty&lt;bytes::bytes::Bytes&gt;&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (10 samples, 2.99%)</title><rect x="94.3284%" y="277" width="2.9851%" height="15" fill="rgb(227,42,18)" fg:x="316" fg:w="10"/><text x="94.5784%" y="287.50">cor..</text></g><g><title>syscall (1 samples, 0.30%)</title><rect x="97.0149%" y="261" width="0.2985%" height="15" fill="rgb(217,2,27)" fg:x="325" fg:w="1"/><text x="97.2649%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;http_body_util::empty::Empty&lt;bytes::bytes::Bytes&gt;&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (2 samples, 0.60%)</title><rect x="97.3134%" y="277" width="0.5970%" height="15" fill="rgb(251,138,23)" fg:x="326" fg:w="2"/><text x="97.5634%" y="287.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Pooled&lt;T,K&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.60%)</title><rect x="97.3134%" y="261" width="0.5970%" height="15" fill="rgb(226,184,11)" fg:x="326" fg:w="2"/><text x="97.5634%" y="271.50"></text></g><g><title>hyper_util::client::legacy::pool::PoolInner&lt;T,K&gt;::put (2 samples, 0.60%)</title><rect x="97.3134%" y="245" width="0.5970%" height="15" fill="rgb(242,142,12)" fg:x="326" fg:w="2"/><text x="97.5634%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.60%)</title><rect x="97.3134%" y="229" width="0.5970%" height="15" fill="rgb(234,187,18)" fg:x="326" fg:w="2"/><text x="97.5634%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write.6187 (1 samples, 0.30%)</title><rect x="97.6119%" y="213" width="0.2985%" height="15" fill="rgb(237,44,42)" fg:x="327" fg:w="1"/><text x="97.8619%" y="223.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (254 samples, 75.82%)</title><rect x="22.3881%" y="309" width="75.8209%" height="15" fill="rgb(211,90,23)" fg:x="75" fg:w="254"/><text x="22.6381%" y="319.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (38 samples, 11.34%)</title><rect x="86.8657%" y="293" width="11.3433%" height="15" fill="rgb(207,81,18)" fg:x="291" fg:w="38"/><text x="87.1157%" y="303.50">hyper_util::clien..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (1 samples, 0.30%)</title><rect x="97.9104%" y="277" width="0.2985%" height="15" fill="rgb(222,107,28)" fg:x="328" fg:w="1"/><text x="98.1604%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (255 samples, 76.12%)</title><rect x="22.3881%" y="341" width="76.1194%" height="15" fill="rgb(237,83,52)" fg:x="75" fg:w="255"/><text x="22.6381%" y="351.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (255 samples, 76.12%)</title><rect x="22.3881%" y="325" width="76.1194%" height="15" fill="rgb(208,67,11)" fg:x="75" fg:w="255"/><text x="22.6381%" y="335.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.30%)</title><rect x="98.2090%" y="309" width="0.2985%" height="15" fill="rgb(249,157,49)" fg:x="329" fg:w="1"/><text x="98.4590%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (1 samples, 0.30%)</title><rect x="98.2090%" y="293" width="0.2985%" height="15" fill="rgb(243,200,1)" fg:x="329" fg:w="1"/><text x="98.4590%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (4 samples, 1.19%)</title><rect x="98.5075%" y="341" width="1.1940%" height="15" fill="rgb(225,162,37)" fg:x="330" fg:w="4"/><text x="98.7575%" y="351.50"></text></g><g><title>tokio::runtime::task::raw::schedule (4 samples, 1.19%)</title><rect x="98.5075%" y="325" width="1.1940%" height="15" fill="rgb(242,92,13)" fg:x="330" fg:w="4"/><text x="98.7575%" y="335.50"></text></g><g><title>tokio::runtime::context::with_scheduler (4 samples, 1.19%)</title><rect x="98.5075%" y="309" width="1.1940%" height="15" fill="rgb(220,43,36)" fg:x="330" fg:w="4"/><text x="98.7575%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (4 samples, 1.19%)</title><rect x="98.5075%" y="293" width="1.1940%" height="15" fill="rgb(213,165,48)" fg:x="330" fg:w="4"/><text x="98.7575%" y="303.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (3 samples, 0.90%)</title><rect x="98.8060%" y="277" width="0.8955%" height="15" fill="rgb(227,200,9)" fg:x="331" fg:w="3"/><text x="99.0560%" y="287.50"></text></g><g><title>all (335 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(221,222,28)" fg:x="0" fg:w="335"/><text x="0.2500%" y="447.50"></text></g><g><title>tokio-runtime-w (329 samples, 98.21%)</title><rect x="1.7910%" y="421" width="98.2090%" height="15" fill="rgb(223,142,26)" fg:x="6" fg:w="329"/><text x="2.0410%" y="431.50">tokio-runtime-w</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (316 samples, 94.33%)</title><rect x="5.6716%" y="405" width="94.3284%" height="15" fill="rgb(243,46,9)" fg:x="19" fg:w="316"/><text x="5.9216%" y="415.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (316 samples, 94.33%)</title><rect x="5.6716%" y="389" width="94.3284%" height="15" fill="rgb(250,56,11)" fg:x="19" fg:w="316"/><text x="5.9216%" y="399.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (316 samples, 94.33%)</title><rect x="5.6716%" y="373" width="94.3284%" height="15" fill="rgb(229,113,5)" fg:x="19" fg:w="316"/><text x="5.9216%" y="383.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::task::raw::poll (299 samples, 89.25%)</title><rect x="10.7463%" y="357" width="89.2537%" height="15" fill="rgb(244,108,28)" fg:x="36" fg:w="299"/><text x="10.9963%" y="367.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::raw::shutdown (1 samples, 0.30%)</title><rect x="99.7015%" y="341" width="0.2985%" height="15" fill="rgb(242,119,50)" fg:x="334" fg:w="1"/><text x="99.9515%" y="351.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.30%)</title><rect x="99.7015%" y="325" width="0.2985%" height="15" fill="rgb(224,164,23)" fg:x="334" fg:w="1"/><text x="99.9515%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;&gt;&gt; (1 samples, 0.30%)</title><rect x="99.7015%" y="309" width="0.2985%" height="15" fill="rgb(214,227,44)" fg:x="334" fg:w="1"/><text x="99.9515%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::fns::MapOkFn&lt;hyper_util::client::legacy::client::Client&lt;hyper_rustls::connector::HttpsConnector&lt;hyper_util::client::legacy::connect::http::HttpConnector&gt;,http_body_util::empty::Empty&lt;bytes::bytes::Bytes&gt;&gt;::connect_to::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.30%)</title><rect x="99.7015%" y="293" width="0.2985%" height="15" fill="rgb(238,202,4)" fg:x="334" fg:w="1"/><text x="99.9515%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Connecting&lt;hyper_util::client::legacy::client::PoolClient&lt;http_body_util::empty::Empty&lt;bytes::bytes::Bytes&gt;&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (1 samples, 0.30%)</title><rect x="99.7015%" y="277" width="0.2985%" height="15" fill="rgb(213,190,30)" fg:x="334" fg:w="1"/><text x="99.9515%" y="287.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.30%)</title><rect x="99.7015%" y="261" width="0.2985%" height="15" fill="rgb(239,15,2)" fg:x="334" fg:w="1"/><text x="99.9515%" y="271.50"></text></g></svg></svg>